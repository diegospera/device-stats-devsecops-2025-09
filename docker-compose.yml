# Docker Compose for Safra Bank Device Statistics DevSecOps Solution
# Local development and testing environment

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: safra-postgres
    environment:
      POSTGRES_DB: safra_device_stats
      POSTGRES_USER: safra_user
      POSTGRES_PASSWORD: safra_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/sql/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
    networks:
      - safra-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U safra_user -d safra_device_stats"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Device Registration API (Internal Service)
  device-registration-api:
    build:
      context: .
      dockerfile: device-registration-api/Dockerfile
    container_name: safra-device-registration-api
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DB_USERNAME: safra_user
      DB_PASSWORD: safra_password
      JAVA_OPTS: "-Xmx512m -Xms256m"
    ports:
      - "8081:8081"
    networks:
      - safra-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 768M
        reservations:
          memory: 512M

  # Statistics API (Public Service)
  statistics-api:
    build:
      context: .
      dockerfile: statistics-api/Dockerfile
    container_name: safra-statistics-api
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DB_USERNAME: safra_user
      DB_PASSWORD: safra_password
      DEVICE_REGISTRATION_API_URL: http://device-registration-api:8081
      JAVA_OPTS: "-Xmx512m -Xms256m"
    ports:
      - "8080:8080"
    networks:
      - safra-network
    depends_on:
      postgres:
        condition: service_healthy
      device-registration-api:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 768M
        reservations:
          memory: 512M

  # Optional: Prometheus for monitoring (DevSecOps observability)
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: safra-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - safra-network
    depends_on:
      - statistics-api
      - device-registration-api
    restart: unless-stopped
    profiles:
      - monitoring

  # Optional: Grafana for dashboards (DevSecOps observability)
  grafana:
    image: grafana/grafana:10.0.3
    container_name: safra-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - safra-network
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles:
      - monitoring

networks:
  safra-network:
    driver: bridge
    name: safra-network

volumes:
  postgres_data:
    name: safra-postgres-data
  prometheus_data:
    name: safra-prometheus-data
  grafana_data:
    name: safra-grafana-data