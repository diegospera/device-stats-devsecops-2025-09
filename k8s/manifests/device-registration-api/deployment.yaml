apiVersion: apps/v1
kind: Deployment
metadata:
  name: device-registration-api
  namespace: safra-device-stats
  labels:
    app: device-registration-api
    tier: backend
    component: internal-api
spec:
  replicas: 2
  selector:
    matchLabels:
      app: device-registration-api
      tier: backend
  template:
    metadata:
      labels:
        app: device-registration-api
        tier: backend
        component: internal-api
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1002
        runAsGroup: 1002
        fsGroup: 1002
      initContainers:
      - name: wait-for-postgres
        image: postgres:16-alpine
        command: ['sh', '-c', 'until pg_isready -h postgres -p 5432 -U safra_user; do echo waiting for postgres; sleep 2; done;']
        env:
        - name: PGUSER
          value: safra_user
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
      containers:
      - name: device-registration-api
        image: diegohub/safra-device-registration-api:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8081
          name: http
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "docker"
        - name: DB_HOST
          value: "postgres"
        - name: DB_PORT
          value: "5432"
        - name: DB_NAME
          value: "safra_device_stats"
        - name: DB_USERNAME
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_USER
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
        - name: JAVA_OPTS
          value: "-XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0 -XX:+UseG1GC"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: logs
          mountPath: /app/logs
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: 8081
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: 8081
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /actuator/health/liveness
            port: 8081
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 60
      volumes:
      - name: tmp
        emptyDir: {}
      - name: logs
        emptyDir: {}
      restartPolicy: Always