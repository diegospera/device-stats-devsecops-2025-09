apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.deviceRegistrationApi.name }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "safra-device-stats.deviceRegistrationApi.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.deviceRegistrationApi.replicaCount }}
  selector:
    matchLabels:
      {{- include "safra-device-stats.deviceRegistrationApi.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "safra-device-stats.deviceRegistrationApi.labels" . | nindent 8 }}
    spec:
      securityContext:
        {{- toYaml .Values.securityContext | nindent 8 }}
      {{- if .Values.postgresql.enabled }}
      initContainers:
      - name: wait-for-postgres
        image: postgres:16-alpine
        command: ['sh', '-c', 'until pg_isready -h {{ .Release.Name }}-postgresql -p 5432 -U {{ .Values.postgresql.auth.username }}; do echo waiting for postgres; sleep 2; done;']
        env:
        - name: PGUSER
          value: {{ .Values.postgresql.auth.username }}
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-postgresql
              key: password
      {{- end }}
      containers:
      - name: {{ .Values.deviceRegistrationApi.name }}
        image: "{{ .Values.deviceRegistrationApi.image.repository }}:{{ .Values.deviceRegistrationApi.image.tag }}"
        imagePullPolicy: {{ .Values.deviceRegistrationApi.image.pullPolicy }}
        ports:
        - containerPort: {{ .Values.deviceRegistrationApi.service.targetPort }}
          name: http
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "docker"
        - name: DB_HOST
          {{- if .Values.postgresql.enabled }}
          value: {{ .Release.Name }}-postgresql
          {{- else }}
          value: {{ .Values.externalDatabase.host }}
          {{- end }}
        - name: DB_PORT
          {{- if .Values.postgresql.enabled }}
          value: "5432"
          {{- else }}
          value: {{ .Values.externalDatabase.port | quote }}
          {{- end }}
        - name: DB_NAME
          {{- if .Values.postgresql.enabled }}
          value: {{ .Values.postgresql.auth.database }}
          {{- else }}
          value: {{ .Values.externalDatabase.database }}
          {{- end }}
        - name: DB_USERNAME
          {{- if .Values.postgresql.enabled }}
          value: {{ .Values.postgresql.auth.username }}
          {{- else }}
          value: {{ .Values.externalDatabase.username }}
          {{- end }}
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              {{- if .Values.postgresql.enabled }}
              name: {{ .Release.Name }}-postgresql
              key: password
              {{- else }}
              name: {{ include "safra-device-stats.fullname" . }}-db-secret
              key: password
              {{- end }}
        - name: JAVA_OPTS
          value: {{ .Values.jvm.opts }}
        resources:
          {{- toYaml .Values.deviceRegistrationApi.resources | nindent 12 }}
        securityContext:
          {{- toYaml .Values.podSecurityContext | nindent 12 }}
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: logs
          mountPath: /app/logs
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: {{ .Values.deviceRegistrationApi.service.targetPort }}
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: {{ .Values.deviceRegistrationApi.service.targetPort }}
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /actuator/health/liveness
            port: {{ .Values.deviceRegistrationApi.service.targetPort }}
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 60
      volumes:
      - name: tmp
        emptyDir: {}
      - name: logs
        emptyDir: {}
      restartPolicy: Always