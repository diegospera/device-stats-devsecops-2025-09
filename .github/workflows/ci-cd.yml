name: CI/CD Pipeline - Safra Bank Device Statistics

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  # These will be set as GitHub repository secrets
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

jobs:
  # Detect changes to determine which services to build
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      shared-models: ${{ steps.changes.outputs.shared-models }}
      statistics-api: ${{ steps.changes.outputs.statistics-api }}
      device-registration-api: ${{ steps.changes.outputs.device-registration-api }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect file changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            shared-models:
              - 'shared-models/**'
              - 'pom.xml'
            statistics-api:
              - 'statistics-api/**'
              - 'shared-models/**'
              - 'pom.xml'
            device-registration-api:
              - 'device-registration-api/**'
              - 'shared-models/**'
              - 'pom.xml'

  # Build and test
  test:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.statistics-api == 'true' || needs.detect-changes.outputs.device-registration-api == 'true' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run tests
        run: mvn clean test

      - name: Run security checks
        run: |
          # OWASP Dependency Check (if configured)
          if [ -f "owasp-dependency-check.xml" ]; then
            mvn org.owasp:dependency-check-maven:check
          fi

  # Build and push Statistics API
  build-statistics-api:
    runs-on: ubuntu-latest
    needs: [detect-changes, test]
    if: ${{ needs.detect-changes.outputs.statistics-api == 'true' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/safra-statistics-api
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Statistics API
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./statistics-api/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ github.ref_name }}

  # Build and push Device Registration API
  build-device-registration-api:
    runs-on: ubuntu-latest
    needs: [detect-changes, test]
    if: ${{ needs.detect-changes.outputs.device-registration-api == 'true' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/safra-device-registration-api
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Device Registration API
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./device-registration-api/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ github.ref_name }}

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: [build-statistics-api, build-device-registration-api]
    if: always() && (needs.build-statistics-api.result == 'success' || needs.build-device-registration-api.result == 'success')
    permissions:
      security-events: write
      contents: read
      actions: read

    strategy:
      matrix:
        service: [statistics-api, device-registration-api]

    steps:
      - name: Run Trivy vulnerability scanner
        if: (matrix.service == 'statistics-api' && needs.build-statistics-api.result == 'success') || (matrix.service == 'device-registration-api' && needs.build-device-registration-api.result == 'success')
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ secrets.DOCKERHUB_USERNAME }}/safra-${{ matrix.service }}:latest'
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'
          exit-code: '0'

      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always() && ((matrix.service == 'statistics-api' && needs.build-statistics-api.result == 'success') || (matrix.service == 'device-registration-api' && needs.build-device-registration-api.result == 'success'))
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

  # Deploy to staging (optional)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-statistics-api, build-device-registration-api]
    if: github.ref == 'refs/heads/main' && (needs.build-statistics-api.result == 'success' || needs.build-device-registration-api.result == 'success')
    environment: staging

    steps:
      - name: Deploy to staging
        run: |
          echo "ðŸš€ Deploying to staging environment..."
          echo "This would trigger your staging deployment process"
          echo "Statistics API: ${{ secrets.DOCKERHUB_USERNAME }}/safra-statistics-api:latest"
          echo "Device Registration API: ${{ secrets.DOCKERHUB_USERNAME }}/safra-device-registration-api:latest"